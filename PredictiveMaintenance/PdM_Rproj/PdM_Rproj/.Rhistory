<table style="width:85%">
getwd()
"../"
"./"
"./Data/file_path <- "./Data""
file_path <- "./Data"
connection_string <- "Driver=SQL Server;                       Server=INNOWAVE-169;                       Database=PdM_Sample;                       UID=RProj_Sample;                       PWD=pass"
sql_share_directory <- paste("c:\\AllShare\\", Sys.getenv("USERNAME"), sep = "")
sql_share_directory
dir.create(sql_share_directory, recursive = TRUE, showWarnings = FALSE)
sql <- RxInSqlServer(connectionString = connection_string,                       shareDir = sql_share_directory)
install.packages("RevoScaleR")
installed.packages()
a<-installed.packages()
class(a)
a<-as.data.frame(a)
head(a)
colnames(a)
"RevoScaleR" %in% a$Package
"dplyr" %in% a$Package
version
a<-as.data.frame(installed.packages)
a<-as.data.frame(installed.packages())
"RevoScaleR" %in% a$Package
"dplyr" %in% a$Package
a$Package
sql <- RxInSqlServer(connectionString = connection_string,                       shareDir = sql_share_directory)
??RxInSqlServer
??rxGetOption
INSTALL.PACKAGES("RevoScaleR")
install.packages("RevoScaleR")
a<-as.data.frame(installed.packages())
a$Package
library(RevoScaleR)
file_path <- "./Data"
connection_string <- "Driver=SQL Server;                       Server=INNOWAVE-169;                       Database=PdM_Sample;                       UID=RProj_Sample;                       PWD=pass" sql_share_directory <- paste("c:\\AllShare\\", Sys.getenv("USERNAME"), sep = "") dir.create(sql_share_directory, recursive = TRUE, showWarnings = FALSE) sql <- RxInSqlServer(connectionString = connection_string,                       shareDir = sql_share_directory)
local <- RxLocalSeq()
train_columns <- c(id = "numeric",                    cycle = "numeric",                    setting1 = "numeric",                    setting2 = "numeric",                    setting3 = "numeric",                    s1 = "numeric",                    s2 = "numeric",                    s3 = "numeric",                    s4 = "numeric",                    s5 = "numeric",                    s6 = "numeric",                    s7 = "numeric",                    s8 = "numeric",                    s9 = "numeric",                    s10 = "numeric",                    s11 = "numeric",                    s12 = "numeric",                    s13 = "numeric",                    s14 = "numeric",                    s15 = "numeric",                    s16 = "numeric",                    s17 = "numeric",                    s18 = "numeric",                    s19 = "numeric",                    s20 = "numeric",                    s21 = "numeric")
train_file <- "PM_Train.csv"
train_file_path <- file.path(file_path, train_file)
train_file_path
train_data_text <- RxTextData(file = train_file_path,                               colClasses = train_columns)
basename(train_file)
strsplit(basename(train_file), "\\.")[[1]][1]
train_table_name <- strsplit(basename(train_file), "\\.")[[1]][1]
train_data_table <- RxSqlServerData(table = train_table_name,                                     connectionString = connection_string,                                     colClasses = train_columns)
rxDataStep(inData = train_data_text,            outFile = train_data_table,            overwrite = TRUE)
connection_string <- "Driver=SQL Server;                       Server=INNOWAVE-169; Database = PdM_Sample  "#;
sql_share_directory <- paste("c:\\AllShare\\", Sys.getenv("USERNAME"), sep = "") dir.create(sql_share_directory, recursive = TRUE, showWarnings = FALSE) sql <- RxInSqlServer(connectionString = connection_string,                       shareDir = sql_share_directory) local <- RxLocalSeq()
??RxInSqlServer
connection_string <- "Driver=SQL Server;                       Server=INNOWAVE-169; Database = PdM_Sample; Trusted_Connection=True"
sql_share_directory <- paste("c:\\AllShare\\", Sys.getenv("USERNAME"), sep = "") dir.create(sql_share_directory, recursive = TRUE, showWarnings = FALSE) sql <- RxInSqlServer(connectionString = connection_string,                       shareDir = sql_share_directory) local <- RxLocalSeq()
train_columns <- c(id = "numeric",                    cycle = "numeric",                    setting1 = "numeric",                    setting2 = "numeric",                    setting3 = "numeric",                    s1 = "numeric",                    s2 = "numeric",                    s3 = "numeric",                    s4 = "numeric",                    s5 = "numeric",                    s6 = "numeric",                    s7 = "numeric",                    s8 = "numeric",                    s9 = "numeric",                    s10 = "numeric",                    s11 = "numeric",                    s12 = "numeric",                    s13 = "numeric",                    s14 = "numeric",                    s15 = "numeric",                    s16 = "numeric",                    s17 = "numeric",                    s18 = "numeric",                    s19 = "numeric",                    s20 = "numeric",                    s21 = "numeric") #################################################################################################### ## Load train data into SQL table #################################################################################################### train_file <- "PM_Train.csv" train_file_path <- file.path(file_path, train_file) train_data_text <- RxTextData(file = train_file_path,                               colClasses = train_columns) train_table_name <- strsplit(basename(train_file), "\\.")[[1]][1] train_data_table <- RxSqlServerData(table = train_table_name,                                     connectionString = connection_string,                                     colClasses = train_columns) rxDataStep(inData = train_data_text,            outFile = train_data_table,            overwrite = TRUE)
train_data_text
rxSummary( ~ ., train_data_table)
train_table_name
connection_string <- "Driver=SQL Server;Server=INNOWAVE-169;Database = PdM_Sample;Trusted_Connection=True"
sql_share_directory <- paste("c:\\AllShare\\", Sys.getenv("USERNAME"), sep = "") dir.create(sql_share_directory, recursive = TRUE, showWarnings = FALSE) sql <- RxInSqlServer(connectionString = connection_string,                       shareDir = sql_share_directory) local <- RxLocalSeq()
train_columns <- c(id = "numeric",                    cycle = "numeric",                    setting1 = "numeric",                    setting2 = "numeric",                    setting3 = "numeric",                    s1 = "numeric",                    s2 = "numeric",                    s3 = "numeric",                    s4 = "numeric",                    s5 = "numeric",                    s6 = "numeric",                    s7 = "numeric",                    s8 = "numeric",                    s9 = "numeric",                    s10 = "numeric",                    s11 = "numeric",                    s12 = "numeric",                    s13 = "numeric",                    s14 = "numeric",                    s15 = "numeric",                    s16 = "numeric",                    s17 = "numeric",                    s18 = "numeric",                    s19 = "numeric",                    s20 = "numeric",                    s21 = "numeric")
train_file <- "PM_Train.csv" train_file_path <- file.path(file_path, train_file) train_data_text <- RxTextData(file = train_file_path,                               colClasses = train_columns) train_table_name <- strsplit(basename(train_file), "\\.")[[1]][1] train_data_table <- RxSqlServerData(table = train_table_name,                                     connectionString = connection_string,                                     colClasses = train_columns) rxDataStep(inData = train_data_text,            outFile = train_data_table,            overwrite = TRUE)
connection_string <- "Driver=SQL Server;Server=INNOWAVE-169;Database=PdM_Sample;Trusted_Connection=True"
sql_share_directory <- paste("c:\\AllShare\\", Sys.getenv("USERNAME"), sep = "") dir.create(sql_share_directory, recursive = TRUE, showWarnings = FALSE) sql <- RxInSqlServer(connectionString = connection_string,                       shareDir = sql_share_directory) local <- RxLocalSeq()
train_file <- "PM_Train.csv" train_file_path <- file.path(file_path, train_file) train_data_text <- RxTextData(file = train_file_path,                               colClasses = train_columns) train_table_name <- strsplit(basename(train_file), "\\.")[[1]][1] train_data_table <- RxSqlServerData(table = train_table_name,                                     connectionString = connection_string,                                     colClasses = train_columns) rxDataStep(inData = train_data_text,            outFile = train_data_table,            overwrite = TRUE)
rxSummary( ~ ., train_data_table)
rxHistogram( ~ s11 | F(id), type = "p", data = train_data_table)
rxLinePlot(s11~cycle|id,train_data_table)
file_path <- "./Data"
connection_string <- "Driver=SQL Server;Server=INNOWAVE-169;Database=PdM_Sample;Trusted_Connection=True" #; #                      UID=RProj_Sample; #                      PWD=pass" sql_share_directory <- paste("c:\\AllShare\\", Sys.getenv("USERNAME"), sep = "") dir.create(sql_share_directory, recursive = TRUE, showWarnings = FALSE) sql <- RxInSqlServer(connectionString = connection_string,                       shareDir = sql_share_directory) local <- RxLocalSeq()
train_columns <- c(id = "numeric",                    cycle = "numeric",                    setting1 = "numeric",                    setting2 = "numeric",                    setting3 = "numeric",                    s1 = "numeric",                    s2 = "numeric",                    s3 = "numeric",                    s4 = "numeric",                    s5 = "numeric",                    s6 = "numeric",                    s7 = "numeric",                    s8 = "numeric",                    s9 = "numeric",                    s10 = "numeric",                    s11 = "numeric",                    s12 = "numeric",                    s13 = "numeric",                    s14 = "numeric",                    s15 = "numeric",                    s16 = "numeric",                    s17 = "numeric",                    s18 = "numeric",                    s19 = "numeric",                    s20 = "numeric",                    s21 = "numeric")
train_file <- "PM_Train.csv" train_file_path <- file.path(file_path, train_file)
train_data_text <- RxTextData(file = train_file_path,                               colClasses = train_columns) train_table_name <- strsplit(basename(train_file), "\\.")[[1]][1] train_data_table <- RxSqlServerData(table = train_table_name,                                     connectionString = connection_string,                                     colClasses = train_columns) rxDataStep(inData = train_data_text,            outFile = train_data_table,            overwrite = TRUE)
rxSummary( ~ ., train_data_table) rxHistogram(~s11,train_data_table) rxHistogram( ~ s11 | F(id), type = "p", data = train_data_table) rxLinePlot(s11~cycle|id,train_data_table)
test_file <- "PM_Test.csv" test_file_path <- file.path(file_path, test_file) test_data_text <- RxTextData(file = test_file_path,                               colClasses = train_columns) test_table_name <- strsplit(basename(test_file), "\\.")[[1]][1] test_data_table <- RxSqlServerData(table = test_table_name,                                     connectionString = connection_string,                                     colClasses = train_columns) rxDataStep(inData = test_data_text,            outFile = test_data_table,            overwrite = TRUE)
truth_file <- "PM_Truth.csv" truth_columns <- c(RUL = "numeric") truth_file_path <- file.path(file_path, truth_file) truth_data_text <- RxTextData(file = truth_file_path,                              colClasses = truth_columns) truth_table_name <- strsplit(basename(truth_file), "\\.")[[1]][1] truth_data_table <- RxSqlServerData(table = truth_table_name,                                    connectionString = connection_string,                                    colClasses = truth_columns) rxDataStep(inData = truth_data_text,            outFile = truth_data_table,            overwrite = TRUE)
rxImport(inData = train_data_table)
local_train_data <- rxImport(inData = train_data_table,  numRows = 10)
dim(local_train_data)
library(dplyr)
install.packages("dplyr")
file_path <- "./Data" #################################################################################################### ## Compute context #################################################################################################### connection_string <- "Driver=SQL Server;Server=INNOWAVE-169;Database=PdM_Sample;Trusted_Connection=True" #; #                      UID=RProj_Sample; #                      PWD=pass" sql_share_directory <- paste("c:\\AllShare\\", Sys.getenv("USERNAME"), sep = "") dir.create(sql_share_directory, recursive = TRUE, showWarnings = FALSE) sql <- RxInSqlServer(connectionString = connection_string,                       shareDir = sql_share_directory) local <- RxLocalSeq() #################################################################################################### ## Train metadata #################################################################################################### train_columns <- c(id = "numeric",                    cycle = "numeric",                    setting1 = "numeric",                    setting2 = "numeric",                    setting3 = "numeric",                    s1 = "numeric",                    s2 = "numeric",                    s3 = "numeric",                    s4 = "numeric",                    s5 = "numeric",                    s6 = "numeric",                    s7 = "numeric",                    s8 = "numeric",                    s9 = "numeric",                    s10 = "numeric",                    s11 = "numeric",                    s12 = "numeric",                    s13 = "numeric",                    s14 = "numeric",                    s15 = "numeric",                    s16 = "numeric",                    s17 = "numeric",                    s18 = "numeric",                    s19 = "numeric",                    s20 = "numeric",                    s21 = "numeric") #################################################################################################### ## Load train data into SQL table #################################################################################################### train_file <- "PM_Train.csv" train_file_path <- file.path(file_path, train_file) train_data_text <- RxTextData(file = train_file_path,                               colClasses = train_columns) train_table_name <- strsplit(basename(train_file), "\\.")[[1]][1] train_data_table <- RxSqlServerData(table = train_table_name,                                     connectionString = connection_string,                                     colClasses = train_columns) rxDataStep(inData = train_data_text,            outFile = train_data_table,            overwrite = TRUE) #################################################################################################### ### Data exploration examples #################################################################################################### rxSummary( ~ ., train_data_table) rxHistogram(~s11,train_data_table) rxHistogram( ~ s11 | F(id), type = "p", data = train_data_table) rxLinePlot(s11~cycle|id,train_data_table) #################################################################################################### ## Load test data into SQL table #################################################################################################### test_file <- "PM_Test.csv" test_file_path <- file.path(file_path, test_file) test_data_text <- RxTextData(file = test_file_path,                               colClasses = train_columns) test_table_name <- strsplit(basename(test_file), "\\.")[[1]][1] test_data_table <- RxSqlServerData(table = test_table_name,                                     connectionString = connection_string,                                     colClasses = train_columns) rxDataStep(inData = test_data_text,            outFile = test_data_table,            overwrite = TRUE) #################################################################################################### ## Load truth data into SQL table #################################################################################################### truth_file <- "PM_Truth.csv" truth_columns <- c(RUL = "numeric") truth_file_path <- file.path(file_path, truth_file) truth_data_text <- RxTextData(file = truth_file_path,                              colClasses = truth_columns) truth_table_name <- strsplit(basename(truth_file), "\\.")[[1]][1] truth_data_table <- RxSqlServerData(table = truth_table_name,                                    connectionString = connection_string,                                    colClasses = truth_columns) rxDataStep(inData = truth_data_text,            outFile = truth_data_table,            overwrite = TRUE) #################################################################################################### ## Data labeling ## Three set of labels will be generated based on the models we use: ## 	Regression models: RUL column, it represents how many more cycles  ##			   an engine will last before it fails  ## Binary classification: Label1 column, it represents whether this engine going to fail  ##			  within number of cycles  ## Multi-class classification: Label2 column, it represents whether this engine going to  ##                             fail within the window [1, w0] cycles or to fail within the  ##                             window [w0+1, w1] cycles, or it will not fail within w1 cycles?  #################################################################################################### library(plyr) data_label <- function(data) {    data <- as.data.frame(data)     max_cycle <- plyr::ddply(data, "id", plyr::summarise, max = max(cycle))   if (!is.null(truth)) {     max_cycle <- plyr::join(max_cycle, truth, by = "id")     max_cycle$max <- max_cycle$max + max_cycle$RUL     max_cycle$RUL <- NULL   }   data <- plyr::join(data, max_cycle, by = "id")   # Label for regression   data$RUL <- data$max - data$cycle   # Label for binary/multi-class classification   data$label1 <- ifelse(data$RUL <= 30, 1, 0)   # Label for multi-class classification   data$label2 <- ifelse(data$RUL <= 15, 2, data$label1)   data$max <- NULL   return(data) }
install.packages("plyr")
install.packages("plyr")
install.packages("dplyr")
library(plyr)
library(dplyr)
local_train_data <- rxImport(train_data_table, numRows = 10) dim(local_train_data)
local_train_data
data_label <- function(data) {    data <- as.data.frame(data)     max_cycle <- plyr::ddply(data, "id", plyr::summarise, max = max(cycle))   if (!is.null(truth)) {     max_cycle <- plyr::join(max_cycle, truth, by = "id")     max_cycle$max <- max_cycle$max + max_cycle$RUL     max_cycle$RUL <- NULL   }   data <- plyr::join(data, max_cycle, by = "id")   # Label for regression   data$RUL <- data$max - data$cycle   # Label for binary/multi-class classification   data$label1 <- ifelse(data$RUL <= 30, 1, 0)   # Label for multi-class classification   data$label2 <- ifelse(data$RUL <= 15, 2, data$label1)   data$max <- NULL   return(data) }
View(local_train_data)
train_columns
rep(1:10, 10)
rep(1:10, length.out = 10)
rep(1:10, length.out = 100)
rep(1:10, 10)
id < -rep(1:10, length.out = 100)
id <- rep(1:10, length.out = 100)
a <- runif(100)
id <- rep(1:10, length.out = 20)
id
a <- runif(20)
id <- rep(1:20, length.out = 20)
id <- rep(1:10, length.out = 20)
a <- 1:20
b <- 20:1
test <- data.frame(id = id, a = a, b = b)
test
test_columns <- c(id = "numeric", a = "numeric", b = "numeric")
test_server_data <- RxSqlServerData(table = test, connectionString = connection_string, colClasses = test_columns)
test_server_data <- RxSqlServerData(table = "test", connectionString = connection_string, colClasses = test_columns)
rxDataStep(inData = test,            outFile = test_server_data,            overwrite = TRUE)
tagged_test_server <- RxSqlServerData(table = "tagged_test",                                     connectionString = connection_string,                                     colClasses = test_columns)
test_function <- function(df) {     res <- df %>%     group_by(id) %>%     summarise(sum_a = sum(a), sum_b = sum(b))     return(res) }
rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(truth = truth_df),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
test_function <- function(df) {     df <- as.data.frame(df)     res <- df %>%     group_by(id) %>%     summarise(sum_a = sum(a), sum_b = sum(b))     return(res) }
rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(truth = truth_df),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
test_function <- function(df) {     df <- as.data.frame(df)     print(head(df, 1))     res <- df %>%     group_by(id) %>%     summarise(sum_a = sum(a), sum_b = sum(b))     return(res) }
rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(truth = truth_df),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
tagged_test_columns <- c(id = "numeric", sum_a = "numeric", sum_b = "numeric") tagged_test_server <- RxSqlServerData(table = "tagged_test",                                     connectionString = connection_string,                                     colClasses = tagged_test_columns)
test_function <- function(df) {     df <- as.data.frame(df)     print(head(df, 1))     res <- df %>%     group_by(id) %>%     summarise(sum_a = sum(a), sum_b = sum(b))     return(res) } rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(truth = truth_df),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
test_function <- function(df) {     df <- as.data.frame(df)     print(head(df, 1))     res <- df %>%     group_by(id) %>%     summarise(sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) } rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(truth = truth_df),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
library(plyr) library(dplyr)
rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
test_function(test)
test_function <- function(df) { library(plyr) library(dplyr)     df <- as.data.frame(df)     print(head(df, 1))     res <- df %>%         group_by(id) %>%         summarise(sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) } rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
test_function <- function(df) { library(plyr) library(dplyr)     df <- as.data.frame(df)     print(head(df, 1))     res <- df %>%         dplyr::group_by(id) %>%         dplyr::summarise(sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) } rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
test_function <- function(df) { library(plyr) library(dplyr)     df <- as.data.frame(df)     print(head(df, 1))     #res <- df %>%     #    dplyr::group_by(id) %>%     #    dplyr::summarise(sum_a = sum(a), sum_b = sum(b))     res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) }
rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
test_function <- function(df) { library(plyr) library(dplyr)     df <- as.data.frame(df)     print(head(df, 1))     #res <- df %>%     #    dplyr::group_by(id) %>%     #    dplyr::summarise(sum_a = sum(a), sum_b = sum(b))     res <- df     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) } rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
rxGetComputeContext
rxGetComputeContext()
test_function <- function(df) { library(plyr) library(dplyr)     df <- as.data.frame(df)     print(head(df, 1))     res <- df %>%         dplyr::group_by(id) %>%         dplyr::summarise(sum_a = sum(a), sum_b = sum(b))     class(res)     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) } rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
test
testtest_function <- function(df) { library(plyr) library(dplyr)     df <- as.data.frame(df)     print(head(df, 1))     res <- df %>%         group_by(id) %>%         summarise(sum_a = sum(a), sum_b = sum(b))     class(res)     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) }
test_function(test)
test_function <- function(df) { library(plyr) library(dplyr)     df <- as.data.frame(df)     print("1")     print(head(df, 1))     print("2")     res <- df %>%         group_by(id) %>%         summarise(sum_a = sum(a), sum_b = sum(b))     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) }
rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 1)
    res <- df %>% group_by(id) %>% summarise(sum_a = sum(a), sum_b = sum(b))
test_function <- function(df) { library(plyr) library(dplyr)     df <- as.data.frame(df)     print("1")     print(head(df, 1))     print("2")     res <- df %>% group_by(id) %>% summarise(sum_a = sum(a), sum_b = sum(b))     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) }
id
test_function <- function(df) { library(plyr) library(dplyr)     df <- as.data.frame(df)     print("1")     print(head(df, 1))     print("2")     res <- df %>% group_by(id) %>% summarise(sum_a = sum(a), sum_b = sum(b))     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) } rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
test_function <- function(df) { library(plyr) library(dplyr)     df <- as.data.frame(df)     print("1")     print(head(df, 1))     print("2")     res <- df %>% group_by(factor(id)) %>% summarise(sum_a = sum(a), sum_b = sum(b))     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) } rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
test_function <- function(df) {     df <- as.data.frame(df)     print("1")     print(head(df, 1))     print("2")     res <- df %>% group_by(factor(id)) %>% summarise(sum_a = sum(a), sum_b = sum(b))     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) } rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function)
env <- new.env env$test_function <- function(df) {     df <- as.data.frame(df)     print("1")     print(head(df, 1))     print("2")     res <- df %>% group_by(factor(id)) %>% summarise(sum_a = sum(a), sum_b = sum(b))     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) }
env <- new.env()
env$test_function <- function(df) {     df <- as.data.frame(df)     print("1")     print(head(df, 1))     print("2")     res <- df %>% group_by(factor(id)) %>% summarise(sum_a = sum(a), sum_b = sum(b))     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) }
 rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            transformEnvir = env,            rowsPerRead = -1,            reportProgress = 3)
rxDataStep
??rxDataStep
rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = env$test_function,            transformEnvir = env,            rowsPerRead = -1,            reportProgress = 3)
class(tagged_)
class(tagged_test_server)
data_label <- function(data) {    data <- as.data.frame(data)     max_cycle <- plyr::ddply(data, "id", plyr::summarise, max = max(cycle))   if (!is.null(truth)) { #truth i suppose is like      max_cycle <- plyr::join(max_cycle, truth, by = "id")     max_cycle$max <- max_cycle$max + max_cycle$RUL     max_cycle$RUL <- NULL   }   data <- plyr::join(data, max_cycle, by = "id")   # Label for regression   data$RUL <- data$max - data$cycle   # Label for binary/multi-class classification   data$label1 <- ifelse(data$RUL <= 30, 1, 0)   # Label for multi-class classification   data$label2 <- ifelse(data$RUL <= 15, 2, data$label1)   data$max <- NULL   return(data) } #################################################################################################### ## Add data labels for train data #################################################################################################### tagged_table_name <- "train_Labels" truth_df <- NULL  tagged_table_train = RxSqlServerData(table = tagged_table_name,                                               colClasses = train_columns,                                              connectionString = connection_string) inDataSource <- RxSqlServerData(table = train_table_name,                                  connectionString = connection_string,                                  colClasses = train_columns,                                 rowsPerRead = 30000) train_data_table <- RxSqlServerData(table = train_table_name,                                     connectionString = connection_string,                                     colClasses = train_columns) rxDataStep(inData = inDataSource,             outFile = tagged_table_train,              overwrite = TRUE,            transformObjects = list(truth = truth_df),            transformFunc = data_label,             rowsPerRead=-1,             reportProgress = 3)
env <- new.env() env$test_function <- function(df) {     df <- as.data.frame(df)     print("1")     print(head(df, 1))     print("2")     #res <- df %>% group_by(factor(id)) %>% summarise(sum_a = sum(a), sum_b = sum(b))     res <- df %>% mutate(sum_a = a + 2, sum_b = b +2)     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) } rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            transformEnvir = env,            rowsPerRead = -1,            reportProgress = 3)
env$test_function <- function(df) {     df <- as.data.frame(df)     print("1")     print(head(df, 1))     print("2")     #res <- df %>% group_by(factor(id)) %>% summarise(sum_a = sum(a), sum_b = sum(b))     res <- df %>% mutate(sum_a = a + 2, sum_b = b + 2)     print(res)     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) } rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            transformEnvir = env,            rowsPerRead = -1,            reportProgress = 3)
 test_function <- function(df) {     df <- as.data.frame(df)     print("1")     print(head(df, 1))     print("2")     #res <- df %>% group_by(factor(id)) %>% summarise(sum_a = sum(a), sum_b = sum(b))     res <- df %>% mutate(sum_a = a + 2, sum_b = b + 2)     print(res)     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) } rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
test_function <- function(df) {     df <- as.data.frame(df)     print("1")     print(head(df, 1))     print("2")     #res <- df %>% group_by(factor(id)) %>% summarise(sum_a = sum(a), sum_b = sum(b))     #res <- df %>% mutate(sum_a = a + 2, sum_b = b + 2)     res$sum_a = res$a + 2     res$sum_b = res$b + 2     print(res)     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(res) } rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
test_function <- function(df) {     df <- as.data.frame(df)     print("1")     print(head(df, 1))     print("2")     #res <- df %>% group_by(factor(id)) %>% summarise(sum_a = sum(a), sum_b = sum(b))     #res <- df %>% mutate(sum_a = a + 2, sum_b = b + 2)     df$sum_a = df$a + 2     df$sum_b = df$b + 2     print(df)     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     print(head(res, 1))     return(df) } rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
if (rxSqlServerTableExists("tagged_test", connectionString = connection_string))     rxSqlServerDropTable("tagged_test", connectionString = connection_string)
rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
tagged_test_columns <- c(id = "numeric", a = "numeric", b = "numeric", sum_a = "numeric", sum_b = "numeric")
tagged_test_server <- RxSqlServerData(table = "tagged_test",                                     connectionString = connection_string,                                     colClasses = tagged_test_columns)
test_function <- function(df) {     df <- as.data.frame(df)     print("1")     print(head(df, 1))     print("2")     #res <- df %>% group_by(factor(id)) %>% summarise(sum_a = sum(a), sum_b = sum(b))     #res <- df %>% mutate(sum_a = a + 2, sum_b = b + 2)     df$sum_a = df$a + 2     df$sum_b = df$b + 2     print(df)     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     return(df) } if (rxSqlServerTableExists("tagged_test", connectionString = connection_string))     rxSqlServerDropTable("tagged_test", connectionString = connection_string) rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
test_function <- function(df) {     df <- as.data.frame(df)     print("1")     print(head(df, 1))     print("2")     #res <- df %>% group_by(factor(id)) %>% summarise(sum_a = sum(a), sum_b = sum(b))     df <- df %>% mutate(sum_a = a + 2, sum_b = b + 2)     #df$sum_a = df$a + 2     #df$sum_b = df$b + 2     print(df)     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     return(df) } if (rxSqlServerTableExists("tagged_test", connectionString = connection_string))     rxSqlServerDropTable("tagged_test", connectionString = connection_string) rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
a<-as.data.frame(installed.packages())
a$Package
"dplyrXdf" %in% a$Package
install.packages("dplyrXdf")
 test_function <- function(df) {     df <- as.data.frame(df)     print("1")     print(head(df, 1))     print("2")     #res <- df %>% group_by(factor(id)) %>% summarise(sum_a = sum(a), sum_b = sum(b))     df <- dplyr::mutate(df, sum_a = a + 2, sum_b = b + 2)     #df$sum_a = df$a + 2     #df$sum_b = df$b + 2     print(df)     #res <- summarise(group_by(df, id), sum_a = sum(a), sum_b = sum(b))     return(df) } if (rxSqlServerTableExists("tagged_test", connectionString = connection_string))     rxSqlServerDropTable("tagged_test", connectionString = connection_string) rxDataStep(inData = test_server_data,            outFile = tagged_test_server,            overwrite = TRUE,            #transformObjects = list(test = test),            transformFunc = test_function,            rowsPerRead = -1,            reportProgress = 3)
install.
install.packages("RevoScaleR")
warnings()
.libPaths()
installed
a<-as.data.frame(installed.packages())
a$Package
install.packages("plyr")
install.packages("dplyr")
sessionInfo()
library(dplyr)
sessionInfo()
getwd()
path_to_file = "../../../../../"
path_to_file = "../../../../../R useful stuff/dplyr versions/"
path_to_file = "../../../../../R useful stuff/dplyr versions/dplyr-0.5.0.tar.gz"
install.packages(path_to_file, repos = NULL, type = "source")
install.packages("C:\\dplyr-0.5.0.tar.gz", repos = NULL, type = "source")
install.packages("rtools")
install.packages("devtools")
devtools::install_github("RevolutionAnalytics/dplyrXdf")
install.packages("dplyr")
